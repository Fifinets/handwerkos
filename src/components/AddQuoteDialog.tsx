import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Plus, Trash2, CalendarIcon } from 'lucide-react';
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { format } from "date-fns";
import { de } from "date-fns/locale";
import { cn } from "@/lib/utils";
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface Customer {
  id: string;
  company_name: string;
  contact_person: string;
}

interface DocumentItem {
  id: string;
  description: string;
  quantity: number;
  unit: string;
  unit_price: number;
  total_price: number;
}

interface AddQuoteDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AddQuoteDialog({ open, onOpenChange }: AddQuoteDialogProps) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [customerId, setCustomerId] = useState('');
  const [validUntil, setValidUntil] = useState<Date | undefined>(undefined);
  const [notes, setNotes] = useState('');
  const [taxRate, setTaxRate] = useState(19.00);
  const [items, setItems] = useState<DocumentItem[]>([{
    id: '1',
    description: '',
    quantity: 1,
    unit: 'Stk.',
    unit_price: 0,
    total_price: 0
  }]);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: customers = [] } = useQuery({
    queryKey: ['customers'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('customers')
        .select('id, company_name, contact_person')
        .eq('status', 'Aktiv')
        .order('company_name');
      
      if (error) throw error;
      return data as Customer[];
    }
  });

  const createQuoteMutation = useMutation({
    mutationFn: async (quoteData: { title: string; description: string; customerId: string }) => {
      // Calculate totals
      const netAmount = items.reduce((sum, item) => sum + item.total_price, 0);
      const taxAmount = (netAmount * taxRate) / 100;
      const totalAmount = netAmount + taxAmount;

      // Create quote
      const { data: quote, error: quoteError } = await supabase
        .from('quotes')
        .insert({
          title,
          description,
          customer_id: customerId,
          valid_until: validUntil ? format(validUntil, 'yyyy-MM-dd') : null,
          tax_rate: taxRate,
          net_amount: netAmount,
          tax_amount: taxAmount,
          total_amount: totalAmount,
          notes,
          quote_number: ''  // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (quoteError) throw quoteError;

      // Create quote items
      const itemsToInsert = items.map((item, index) => ({
        quote_id: quote.id,
        position: index + 1,
        description: item.description,
        quantity: item.quantity,
        unit: item.unit,
        unit_price: item.unit_price,
        total_price: item.total_price
      }));

      const { error: itemsError } = await supabase
        .from('document_items')
        .insert(itemsToInsert);

      if (itemsError) throw itemsError;

      return quote;
    },
    onSuccess: () => {
      toast({
        title: "Erfolgreich",
        description: "Angebot wurde erfolgreich erstellt.",
      });
      queryClient.invalidateQueries({ queryKey: ['quotes'] });
      handleClose();
    },
    onError: (error) => {
      toast({
        title: "Fehler",
        description: "Beim Erstellen des Angebots ist ein Fehler aufgetreten.",
        variant: "destructive",
      });
      console.error('Error creating quote:', error);
    }
  });

  const handleClose = () => {
    setTitle('');
    setDescription('');
    setCustomerId('');
    setValidUntil(undefined);
    setNotes('');
    setTaxRate(19.00);
    setItems([{
      id: '1',
      description: '',
      quantity: 1,
      unit: 'Stk.',
      unit_price: 0,
      total_price: 0
    }]);
    onOpenChange(false);
  };

  const addItem = () => {
    const newItem: DocumentItem = {
      id: Date.now().toString(),
      description: '',
      quantity: 1,
      unit: 'Stk.',
      unit_price: 0,
      total_price: 0
    };
    setItems([...items, newItem]);
  };

  const removeItem = (id: string) => {
    if (items.length > 1) {
      setItems(items.filter(item => item.id !== id));
    }
  };

  const updateItem = (id: string, field: keyof DocumentItem, value: string | number) => {
    setItems(items.map(item => {
      if (item.id === id) {
        const updatedItem = { ...item, [field]: value };
        
        // Recalculate total price when quantity or unit_price changes
        if (field === 'quantity' || field === 'unit_price') {
          updatedItem.total_price = updatedItem.quantity * updatedItem.unit_price;
        }
        
        return updatedItem;
      }
      return item;
    }));
  };

  const netAmount = items.reduce((sum, item) => sum + item.total_price, 0);
  const taxAmount = (netAmount * taxRate) / 100;
  const totalAmount = netAmount + taxAmount;

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title || !customerId || items.some(item => !item.description)) {
      toast({
        title: "Fehler",
        description: "Bitte füllen Sie alle Pflichtfelder aus.",
        variant: "destructive",
      });
      return;
    }

    createQuoteMutation.mutate({});
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Neues Angebot erstellen</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="title">Titel *</Label>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Angebots-Titel eingeben"
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="customer">Kunde *</Label>
              <Select value={customerId} onValueChange={setCustomerId} required>
                <SelectTrigger>
                  <SelectValue placeholder="Kunde auswählen" />
                </SelectTrigger>
                <SelectContent>
                  {customers.map((customer) => (
                    <SelectItem key={customer.id} value={customer.id}>
                      {customer.company_name} ({customer.contact_person})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Beschreibung</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Beschreibung des Angebots"
              rows={3}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Gültig bis</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !validUntil && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {validUntil ? format(validUntil, "PPP", { locale: de }) : "Datum auswählen"}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={validUntil}
                    onSelect={setValidUntil}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label htmlFor="taxRate">Steuersatz (%)</Label>
              <Input
                id="taxRate"
                type="number"
                step="0.01"
                min="0"
                max="100"
                value={taxRate}
                onChange={(e) => setTaxRate(parseFloat(e.target.value) || 0)}
              />
            </div>
          </div>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                Positionen
                <Button type="button" onClick={addItem} size="sm">
                  <Plus className="h-4 w-4 mr-2" />
                  Position hinzufügen
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {items.map((item) => (
                <div key={item.id} className="grid grid-cols-12 gap-2 items-end">
                  <div className="col-span-4 space-y-2">
                    <Label>Beschreibung *</Label>
                    <Input
                      value={item.description}
                      onChange={(e) => updateItem(item.id, 'description', e.target.value)}
                      placeholder="Beschreibung der Position"
                      required
                    />
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label>Menge</Label>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      value={item.quantity}
                      onChange={(e) => updateItem(item.id, 'quantity', parseFloat(e.target.value) || 0)}
                    />
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label>Einheit</Label>
                    <Select 
                      value={item.unit} 
                      onValueChange={(value) => updateItem(item.id, 'unit', value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Stk.">Stk.</SelectItem>
                        <SelectItem value="h">Stunden</SelectItem>
                        <SelectItem value="m">Meter</SelectItem>
                        <SelectItem value="m²">m²</SelectItem>
                        <SelectItem value="kg">kg</SelectItem>
                        <SelectItem value="l">Liter</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label>Einzelpreis</Label>
                    <Input
                      type="number"
                      step="0.01"
                      min="0"
                      value={item.unit_price}
                      onChange={(e) => updateItem(item.id, 'unit_price', parseFloat(e.target.value) || 0)}
                    />
                  </div>
                  <div className="col-span-1 space-y-2">
                    <Label>Gesamt</Label>
                    <div className="text-sm font-medium p-2 bg-muted rounded">
                      {item.total_price.toFixed(2)} €
                    </div>
                  </div>
                  <div className="col-span-1">
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={() => removeItem(item.id)}
                      disabled={items.length === 1}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}

              <div className="border-t pt-4 space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Nettosumme:</span>
                  <span>{netAmount.toFixed(2)} €</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>MwSt. ({taxRate}%):</span>
                  <span>{taxAmount.toFixed(2)} €</span>
                </div>
                <div className="flex justify-between text-lg font-bold">
                  <span>Gesamtsumme:</span>
                  <span>{totalAmount.toFixed(2)} €</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-2">
            <Label htmlFor="notes">Anmerkungen</Label>
            <Textarea
              id="notes"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Zusätzliche Anmerkungen zum Angebot"
              rows={3}
            />
          </div>

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={handleClose}>
              Abbrechen
            </Button>
            <Button type="submit" disabled={createQuoteMutation.isPending}>
              {createQuoteMutation.isPending ? 'Erstelle...' : 'Angebot erstellen'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}